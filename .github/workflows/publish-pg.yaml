name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'postgres-cnpg/**'
      - '.github/workflows/publish-pg.yaml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag the image with (e.g., 1.0.0) - should match Postgres version'
        required: true
        type: string


permissions:
  contents: read
  packages: write
  
env:
  IMAGE_NAME: postgres
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            arch: amd64
          - runner: ubuntu-24.04-arm
            arch: arm64
    
    runs-on: ${{ matrix.platform.runner }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name != 'workflow_dispatch' }}
            type=sha,format=short,prefix=
            type=raw,value=${{ inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build
        id: build
        uses: docker/build-push-action@v5
        with:
          context: postgres-cnpg
          platforms: linux/${{ matrix.platform.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          arch="${{ matrix.platform.arch }}"
          echo "$digest" > "/tmp/digests/${arch}"
          echo "DIGEST=${digest}" >> $GITHUB_ENV

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform.arch }}
          path: /tmp/digests/${{ matrix.platform.arch }}
          retention-days: 1
 
  merge:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name != 'workflow_dispatch' }}
            type=sha,format=short,prefix=
            type=raw,value=${{ inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' }}


      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(for digest in $(ls); do echo -n "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@$(cat $digest) "; done) --tag ${{ steps.meta.outputs.tags }}

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}